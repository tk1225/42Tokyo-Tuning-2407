events {
    # worker_processes auto;
    worker_connections 1024;
}

http {
    # json形式で、nginxのlogを取得したい JSON文字列で許可されない文字はescapeする
    log_format json escape=json '{"time":"$time_local",'
                            '"host":"$remote_addr",'
                            '"forwardedfor":"$http_x_forwarded_for",'
                            '"req":"$request",'
                            '"status":"$status",'
                            '"method":"$request_method",'
                            '"uri":"$request_uri",'
                            '"body_bytes":$body_bytes_sent,'
                            '"referer":"$http_referer",'
                            '"ua":"$http_user_agent",'
                            '"request_time":$request_time,'
                            '"cache":"$upstream_http_x_cache",'
                            '"runtime":"$upstream_http_x_runtime",'
                            '"response_time":"$upstream_response_time",'
                            '"vhost":"$host"}';

    # logの出力先を指定し、上で定義したjsonのフォーマットを使用する
    access_log /var/log/nginx/access.log json;
    # error logの出力先の指定
    error_log /var/log/nginx/error.log;

    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8080;
    }

    # gzip on;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # gzip_proxied any;
    # gzip_vary on;
    # gzip_comp_level 6;

    server {
        listen 443 ssl;

        ssl_certificate /da/tls/fullchain1.pem;
        ssl_certificate_key /da/tls/privkey1.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    server {
        listen 80;

        return 301 https://$host$request_uri;
    }
}
